{"ast":null,"code":"var _jsxFileName = \"/home/weverson/Temp/Workspaces/imersao-react-alura/learnquiz/src/screens/Quiz/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react'; // import db from '../../../db.json';\n\nimport Widget from '../../components/Widget';\nimport QuizLogo from '../../components/QuizLogo';\nimport QuizBackground from '../../components/QuizBackground';\nimport QuizContainer from '../../components/QuizContainer';\nimport AlternativesForm from '../../components/AlternativesForm';\nimport Button from '../../components/Button';\nimport BackLinkArrow from '../../components/BackLinkArrow';\nimport { useRouter } from 'next/router';\nimport GitHubCorner from '../../components/GitHubCorner';\n\nconst QuizUserName = () => {\n  const {\n    query: {\n      name\n    }\n  } = useRouter();\n  return __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 10\n    }\n  }, \"Este \\xE9 seu resultado final \", name);\n};\n\nconst HandleClickHome = event => {\n  const router = useRouter();\n  event.preventDefault;\n  return __jsx(Button, {\n    onClick: () => router.push('/'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 10\n    }\n  }, \"fefe\");\n};\n\nfunction ResultWidget({\n  results,\n  totalQuestions\n}) {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(QuizUserName, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  })), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, `VocÃª acertou\n            ${results.reduce((somatoriaAtual, resultadoAtual) => {\n    const isAcerto = resultadoAtual === true;\n\n    if (isAcerto) {\n      return somatoriaAtual + 1;\n    }\n\n    return somatoriaAtual;\n  }, 0)}`, ' ', \"de \", totalQuestions, \" perguntas\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, results.map((result, index) => __jsx(\"li\", {\n    key: `result__${result}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, \"#\", index + 1, \" Resultado: \", result == true ? 'Acertou ' : 'Errou'))), __jsx(HandleClickHome, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    onClick: HandleClickHome,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Jogar Novamente\", console.log(\"testandoooo\"))));\n}\n\nfunction LoadingWidget() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"Carregando...\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction QuestionWidget({\n  question,\n  questionIndex,\n  totalQuestions,\n  onSubmit,\n  addResult\n}) {\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n  const [isQuestionSubmited, setIsQuestionSubmited] = React.useState(false);\n  const questionId = `question__${questionIndex}`;\n  const isCorrect = selectedAlternative === question.answer;\n  const hasAlternativeSelected = selectedAlternative !== undefined;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, __jsx(BackLinkArrow, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, `Pergunta ${questionIndex + 1} de ${totalQuestions}`)), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '190px',\n      objectFit: 'cover'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, question.description), __jsx(AlternativesForm, {\n    onSubmit: infosDoEvento => {\n      infosDoEvento.preventDefault();\n      setIsQuestionSubmited(true);\n      setTimeout(() => {\n        addResult(isCorrect);\n        onSubmit();\n        setIsQuestionSubmited(false);\n        setSelectedAlternative(undefined);\n      }, 3 * 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, question.alternatives.map((alternative, alternativeIndex) => {\n    const alternativeId = `alternative__${alternativeIndex}`;\n    const alternativeStatus = isCorrect ? 'SUCCESS' : 'ERROR';\n    const isSelected = selectedAlternative === alternativeIndex;\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      key: alternativeId,\n      htmlFor: alternativeId,\n      \"data-selected\": isSelected,\n      \"data-status\": isQuestionSubmited && alternativeStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }, __jsx(\"input\", {\n      style: {\n        display: 'none'\n      },\n      id: alternativeId,\n      name: questionId,\n      onChange: () => setSelectedAlternative(alternativeIndex),\n      type: \"radio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    disabled: !hasAlternativeSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, \"Confirmar\"), isQuestionSubmited && isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 47\n    }\n  }, \"You're goddamn right!\"), isQuestionSubmited && !isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 48\n    }\n  }, \"Fail!\"))));\n}\n\nconst screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage({\n  externalQuestions,\n  externalBg\n}) {\n  const [screenState, setScreenState] = React.useState(screenStates.LOADING);\n  const [results, setResults] = React.useState([]);\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const questionIndex = currentQuestion;\n  const question = externalQuestions[questionIndex];\n  const totalQuestions = externalQuestions.length;\n  const bg = externalBg;\n\n  function addResult(result) {\n    // results.push(result);\n    setResults([...results, result]);\n  } // [React chama de: Efeitos || Effects]\n  // React.useEffect\n  // atualizado === willUpdate\n  // morre === willUnmount\n\n\n  React.useEffect(() => {\n    // fetch() ...\n    setTimeout(() => {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 2000); // nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    const nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 5\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    addResult: addResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 11\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 50\n    }\n  }), screenState === screenStates.RESULT && __jsx(ResultWidget, {\n    results: results,\n    totalQuestions: totalQuestions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 49\n    }\n  })), __jsx(GitHubCorner, {\n    projectUrl: \"https://github.com/weversonneri/quiz-nextljs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/weverson/Temp/Workspaces/imersao-react-alura/learnquiz/src/screens/Quiz/index.js"],"names":["React","Widget","QuizLogo","QuizBackground","QuizContainer","AlternativesForm","Button","BackLinkArrow","useRouter","GitHubCorner","QuizUserName","query","name","HandleClickHome","event","router","preventDefault","push","ResultWidget","results","totalQuestions","reduce","somatoriaAtual","resultadoAtual","isAcerto","map","result","index","console","log","LoadingWidget","QuestionWidget","question","questionIndex","onSubmit","addResult","selectedAlternative","setSelectedAlternative","useState","undefined","isQuestionSubmited","setIsQuestionSubmited","questionId","isCorrect","answer","hasAlternativeSelected","width","height","objectFit","image","title","description","infosDoEvento","setTimeout","alternatives","alternative","alternativeIndex","alternativeId","alternativeStatus","isSelected","display","screenStates","QUIZ","LOADING","RESULT","QuizPage","externalQuestions","externalBg","screenState","setScreenState","setResults","currentQuestion","setCurrentQuestion","length","bg","useEffect","handleSubmitQuiz","nextQuestion"],"mappings":"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","sourcesContent":["import React from 'react';\n// import db from '../../../db.json';\nimport Widget from '../../components/Widget';\nimport QuizLogo from '../../components/QuizLogo';\nimport QuizBackground from '../../components/QuizBackground';\nimport QuizContainer from '../../components/QuizContainer';\nimport AlternativesForm from '../../components/AlternativesForm';\nimport Button from '../../components/Button';\nimport BackLinkArrow from '../../components/BackLinkArrow';\nimport { useRouter } from 'next/router';\nimport GitHubCorner from '../../components/GitHubCorner';\n\n\nconst QuizUserName = () => {\n  const {\n    query: { name },\n  } = useRouter();\n\n  return <span>Este Ã© seu resultado final {name}</span>\n}\n\nconst HandleClickHome = (event) => {\n  const router = useRouter();\n  event.preventDefault;\n  \n  return <Button onClick={() => router.push('/')}>fefe</Button>\n}\n\nfunction ResultWidget({ results, totalQuestions }) {\n  return (\n    <Widget>\n      <Widget.Header>\n        <QuizUserName />\n      </Widget.Header>\n\n      <Widget.Content>\n        <p>\n          {`VocÃª acertou\n            ${results.reduce((somatoriaAtual, resultadoAtual) => {\n            const isAcerto = resultadoAtual === true;\n            if (isAcerto) {\n              return somatoriaAtual + 1;\n            }\n            return somatoriaAtual;\n\n          }, 0)}`}\n\n          {/*results.filter((x) => x).length*/}\n          {' '}\n           de {totalQuestions} perguntas\n\n        </p>\n        <ul>\n          {results.map((result, index) => (\n            <li key={`result__${result}`}>\n              #{index + 1} Resultado: {result == true ? 'Acertou ' : 'Errou'}\n            </li>\n          ))}\n        </ul>\n        <HandleClickHome />\n        <button onClick={HandleClickHome}>\n          Jogar Novamente\n          {console.log(\"testandoooo\")}\n       </button>\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nfunction LoadingWidget() {\n  return (\n    <Widget>\n      <Widget.Header>\n        Carregando...\n      </Widget.Header>\n\n      <Widget.Content >\n\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nfunction QuestionWidget({\n  question,\n  questionIndex,\n  totalQuestions,\n  onSubmit,\n  addResult,\n}) {\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n  const [isQuestionSubmited, setIsQuestionSubmited] = React.useState(false);\n  const questionId = `question__${questionIndex}`;\n  const isCorrect = selectedAlternative === question.answer;\n  const hasAlternativeSelected = selectedAlternative !== undefined;\n\n  return (\n    <Widget>\n      <Widget.Header>\n        <BackLinkArrow href=\"/\" />\n        <h3>\n          {`Pergunta ${questionIndex + 1} de ${totalQuestions}`}\n        </h3>\n      </Widget.Header>\n\n      <img\n        alt=\"DescriÃ§Ã£o\"\n        style={{\n          width: '100%',\n          height: '190px',\n          objectFit: 'cover',\n        }}\n        src={question.image}\n      />\n      <Widget.Content>\n        <h2>\n          {question.title}\n        </h2>\n        <p>\n          {question.description}\n        </p>\n\n        <AlternativesForm\n          onSubmit={(infosDoEvento) => {\n            infosDoEvento.preventDefault();\n            setIsQuestionSubmited(true);\n            setTimeout(() => {\n              addResult(isCorrect);\n              onSubmit();\n              setIsQuestionSubmited(false);\n              setSelectedAlternative(undefined);\n            }, 3 * 1000);\n          }}\n        >\n          {question.alternatives.map((alternative, alternativeIndex) => {\n            const alternativeId = `alternative__${alternativeIndex}`;\n            const alternativeStatus = isCorrect ? 'SUCCESS' : 'ERROR';\n            const isSelected = selectedAlternative === alternativeIndex;\n            return (\n              <Widget.Topic\n                as=\"label\"\n                key={alternativeId}\n                htmlFor={alternativeId}\n                data-selected={isSelected}\n                data-status={isQuestionSubmited && alternativeStatus}\n              >\n                <input\n                  style={{ display: 'none' }}\n                  id={alternativeId}\n                  name={questionId}\n                  onChange={() => setSelectedAlternative(alternativeIndex)}\n                  type=\"radio\"\n                />\n                {alternative}\n              </Widget.Topic>\n            );\n          })}\n\n          {/* <pre>\n            {JSON.stringify(question, null, 4)}\n          </pre> */}\n          <Button type=\"submit\" disabled={!hasAlternativeSelected}>\n            Confirmar\n          </Button>\n          {isQuestionSubmited && isCorrect && <p>You're goddamn right!</p>}\n          {isQuestionSubmited && !isCorrect && <p>Fail!</p>}\n        </AlternativesForm>\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nconst screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT',\n};\nexport default function QuizPage({ externalQuestions, externalBg }) {\n  const [screenState, setScreenState] = React.useState(screenStates.LOADING);\n  const [results, setResults] = React.useState([]);\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const questionIndex = currentQuestion;\n  const question = externalQuestions[questionIndex];\n  const totalQuestions = externalQuestions.length;\n  const bg = externalBg;\n\n  function addResult(result) {\n    // results.push(result);\n    setResults([\n      ...results,\n      result,\n    ]);\n  }\n\n  // [React chama de: Efeitos || Effects]\n  // React.useEffect\n  // atualizado === willUpdate\n  // morre === willUnmount\n  React.useEffect(() => {\n    // fetch() ...\n    setTimeout(() => {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 2000);\n    // nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    const nextQuestion = questionIndex + 1;\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return (\n    <QuizBackground backgroundImage={bg}>\n      <QuizContainer>\n        <QuizLogo />\n        {screenState === screenStates.QUIZ && (\n          <QuestionWidget\n            question={question}\n            questionIndex={questionIndex}\n            totalQuestions={totalQuestions}\n            onSubmit={handleSubmitQuiz}\n            addResult={addResult}\n          />\n        )}\n\n        {screenState === screenStates.LOADING && <LoadingWidget />}\n\n        {screenState === screenStates.RESULT && <ResultWidget results={results} totalQuestions={totalQuestions} />}\n      </QuizContainer>\n      <GitHubCorner projectUrl=\"https://github.com/weversonneri/quiz-nextljs\" />\n    </QuizBackground>\n  );\n}"]},"metadata":{},"sourceType":"module"}