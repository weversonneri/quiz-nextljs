{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/weverson/Temp/Workspaces/imersao-react-alura/learnquiz/src/screens/Quiz/index.js\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react'; // import db from '../../../db.json';\n\nimport Widget from '../../components/Widget';\nimport QuizLogo from '../../components/QuizLogo';\nimport QuizBackground from '../../components/QuizBackground';\nimport QuizContainer from '../../components/QuizContainer';\nimport AlternativesForm from '../../components/AlternativesForm';\nimport Button from '../../components/Button';\nimport BackLinkArrow from '../../components/BackLinkArrow';\nimport { useRouter } from 'next/router';\n\nvar QuizUserName = function QuizUserName() {\n  _s();\n\n  var _useRouter = useRouter(),\n      name = _useRouter.query.name;\n\n  return __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }, \"Este \\xE9 seu resultado final \", name);\n};\n\n_s(QuizUserName, \"WdWGFzYWu/qY8BlbFdeLnbAtX5c=\", false, function () {\n  return [useRouter];\n});\n\n_c = QuizUserName;\n\nfunction ResultWidget(_ref) {\n  var _this2 = this;\n\n  var results = _ref.results,\n      totalQuestions = _ref.totalQuestions;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, __jsx(QuizUserName, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  })), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, \"Voc\\xEA acertou\\n            \".concat(results.reduce(function (somatoriaAtual, resultadoAtual) {\n    var isAcerto = resultadoAtual === true;\n\n    if (isAcerto) {\n      return somatoriaAtual + 1;\n    }\n\n    return somatoriaAtual;\n  }, 0)), ' ', \"de \", totalQuestions, \" perguntas\", \"\".concat(results.reduce(function (somatoriaAtual, resultadoAtual) {\n    var isAcerto = resultadoAtual === true;\n\n    if (isAcerto) {\n      return somatoriaAtual + 1;\n    }\n\n    return somatoriaAtual;\n  }, 0))), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, results.map(function (result, index) {\n    return __jsx(\"li\", {\n      key: \"result__\".concat(result),\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, \"#\", index + 1, ' ', \"Resultado:\", result === true ? 'Acertou' : 'Errou');\n  }))));\n}\n\n_c2 = ResultWidget;\n\nfunction LoadingWidget() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"Carregando...\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }));\n}\n\n_c3 = LoadingWidget;\n\nfunction QuestionWidget(_ref2) {\n  _s2();\n\n  var _this3 = this;\n\n  var question = _ref2.question,\n      questionIndex = _ref2.questionIndex,\n      totalQuestions = _ref2.totalQuestions,\n      _onSubmit = _ref2.onSubmit,\n      addResult = _ref2.addResult;\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedAlternative = _React$useState2[0],\n      setSelectedAlternative = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isQuestionSubmited = _React$useState4[0],\n      setIsQuestionSubmited = _React$useState4[1];\n\n  var questionId = \"question__\".concat(questionIndex);\n  var isCorrect = selectedAlternative === question.answer;\n  var hasAlternativeSelected = selectedAlternative !== undefined;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, __jsx(BackLinkArrow, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \"Pergunta \".concat(questionIndex + 1, \" de \").concat(totalQuestions))), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'fill'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, question.description), __jsx(AlternativesForm, {\n    onSubmit: function onSubmit(infosDoEvento) {\n      infosDoEvento.preventDefault();\n      setIsQuestionSubmited(true);\n      setTimeout(function () {\n        addResult(isCorrect);\n\n        _onSubmit();\n\n        setIsQuestionSubmited(false);\n        setSelectedAlternative(undefined);\n      }, 3 * 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, question.alternatives.map(function (alternative, alternativeIndex) {\n    var alternativeId = \"alternative__\".concat(alternativeIndex);\n    var alternativeStatus = isCorrect ? 'SUCCESS' : 'ERROR';\n    var isSelected = selectedAlternative === alternativeIndex;\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      key: alternativeId,\n      htmlFor: alternativeId,\n      \"data-selected\": isSelected,\n      \"data-status\": isQuestionSubmited && alternativeStatus,\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }, __jsx(\"input\", {\n      style: {\n        display: 'none'\n      },\n      id: alternativeId,\n      name: questionId,\n      onChange: function onChange() {\n        return setSelectedAlternative(alternativeIndex);\n      },\n      type: \"radio\",\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    disabled: !hasAlternativeSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, \"Confirmar\"), isQuestionSubmited && isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 47\n    }\n  }, \"Voc\\xEA acertou!\"), isQuestionSubmited && !isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 48\n    }\n  }, \"Voc\\xEA errou!\"))));\n}\n\n_s2(QuestionWidget, \"gOPL1EmksK8wUP52KQZyVU1FVK0=\");\n\n_c4 = QuestionWidget;\nvar screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage(_ref3) {\n  _s3();\n\n  var externalQuestions = _ref3.externalQuestions,\n      externalBg = _ref3.externalBg;\n\n  var _React$useState5 = React.useState(screenStates.LOADING),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      screenState = _React$useState6[0],\n      setScreenState = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      results = _React$useState8[0],\n      setResults = _React$useState8[1];\n\n  var _React$useState9 = React.useState(0),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      currentQuestion = _React$useState10[0],\n      setCurrentQuestion = _React$useState10[1];\n\n  var questionIndex = currentQuestion;\n  var question = externalQuestions[questionIndex];\n  var totalQuestions = externalQuestions.length;\n  var bg = externalBg;\n\n  function addResult(result) {\n    // results.push(result);\n    setResults([].concat(_toConsumableArray(results), [result]));\n  } // [React chama de: Efeitos || Effects]\n  // React.useEffect\n  // atualizado === willUpdate\n  // morre === willUnmount\n\n\n  React.useEffect(function () {\n    // fetch() ...\n    setTimeout(function () {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 2000); // nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    var nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 5\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    addResult: addResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 11\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 50\n    }\n  }), screenState === screenStates.RESULT && __jsx(ResultWidget, {\n    results: results,\n    totalQuestions: totalQuestions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 49\n    }\n  })));\n}\n\n_s3(QuizPage, \"op6a2G6WeNFK4t0JnGKr98IrMhU=\");\n\n_c5 = QuizPage;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"QuizUserName\");\n$RefreshReg$(_c2, \"ResultWidget\");\n$RefreshReg$(_c3, \"LoadingWidget\");\n$RefreshReg$(_c4, \"QuestionWidget\");\n$RefreshReg$(_c5, \"QuizPage\");","map":{"version":3,"sources":["/home/weverson/Temp/Workspaces/imersao-react-alura/learnquiz/src/screens/Quiz/index.js"],"names":["React","Widget","QuizLogo","QuizBackground","QuizContainer","AlternativesForm","Button","BackLinkArrow","useRouter","QuizUserName","name","query","ResultWidget","results","totalQuestions","reduce","somatoriaAtual","resultadoAtual","isAcerto","map","result","index","LoadingWidget","QuestionWidget","question","questionIndex","onSubmit","addResult","useState","undefined","selectedAlternative","setSelectedAlternative","isQuestionSubmited","setIsQuestionSubmited","questionId","isCorrect","answer","hasAlternativeSelected","width","height","objectFit","image","title","description","infosDoEvento","preventDefault","setTimeout","alternatives","alternative","alternativeIndex","alternativeId","alternativeStatus","isSelected","display","screenStates","QUIZ","LOADING","RESULT","QuizPage","externalQuestions","externalBg","screenState","setScreenState","setResults","currentQuestion","setCurrentQuestion","length","bg","useEffect","handleSubmitQuiz","nextQuestion"],"mappings":"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","sourcesContent":["import React from 'react';\n// import db from '../../../db.json';\nimport Widget from '../../components/Widget';\nimport QuizLogo from '../../components/QuizLogo';\nimport QuizBackground from '../../components/QuizBackground';\nimport QuizContainer from '../../components/QuizContainer';\nimport AlternativesForm from '../../components/AlternativesForm';\nimport Button from '../../components/Button';\nimport BackLinkArrow from '../../components/BackLinkArrow';\nimport { useRouter } from 'next/router';\n\n\nconst QuizUserName = () => {\n  const {\n      query: { name },\n  } = useRouter();\n\n  return <span>Este é seu resultado final {name}</span>\n}\n\nfunction ResultWidget({ results, totalQuestions }) {\n  return (\n    <Widget>\n      <Widget.Header>\n        <QuizUserName />\n      </Widget.Header>\n\n      <Widget.Content>\n        <p>\n          {`Você acertou\n            ${results.reduce((somatoriaAtual, resultadoAtual) => {\n            const isAcerto = resultadoAtual === true;\n            if (isAcerto) {\n              return somatoriaAtual + 1;\n            }\n            return somatoriaAtual;\n            \n          }, 0)}` }\n\n          {/*results.filter((x) => x).length*/}\n          {' '}\n           de {totalQuestions} perguntas\n\n           {`${results.reduce((somatoriaAtual, resultadoAtual) => {\n            const isAcerto = resultadoAtual === true;\n            if (isAcerto) {\n              return somatoriaAtual + 1;\n            }\n            return somatoriaAtual;\n            \n          }, 0)}`}\n        </p>\n        <ul>\n          {results.map((result, index) => (\n            <li key={`result__${result}`}>\n              #\n              {index + 1}\n              {' '}\n              Resultado:\n              {result === true\n                ? 'Acertou'\n                : 'Errou'}\n            </li>\n          ))}\n        </ul>\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nfunction LoadingWidget() {\n  return (\n    <Widget>\n      <Widget.Header>\n        Carregando...\n      </Widget.Header>\n\n      <Widget.Content >\n\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nfunction QuestionWidget({\n  question,\n  questionIndex,\n  totalQuestions,\n  onSubmit,\n  addResult,\n}) {\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n  const [isQuestionSubmited, setIsQuestionSubmited] = React.useState(false);\n  const questionId = `question__${questionIndex}`;\n  const isCorrect = selectedAlternative === question.answer;\n  const hasAlternativeSelected = selectedAlternative !== undefined;\n\n  return (\n    <Widget>\n      <Widget.Header>\n        <BackLinkArrow href=\"/\" />\n        <h3>\n          {`Pergunta ${questionIndex + 1} de ${totalQuestions}`}\n        </h3>\n      </Widget.Header>\n\n      <img\n        alt=\"Descrição\"\n        style={{\n          width: '100%',\n          height: '150px',\n          objectFit: 'fill',\n        }}\n        src={question.image}\n      />\n      <Widget.Content>\n        <h2>\n          {question.title}\n        </h2>\n        <p>\n          {question.description}\n        </p>\n\n        <AlternativesForm\n          onSubmit={(infosDoEvento) => {\n            infosDoEvento.preventDefault();\n            setIsQuestionSubmited(true);\n            setTimeout(() => {\n              addResult(isCorrect);\n              onSubmit();\n              setIsQuestionSubmited(false);\n              setSelectedAlternative(undefined);\n            }, 3 * 1000);\n          }}\n        >\n          {question.alternatives.map((alternative, alternativeIndex) => {\n            const alternativeId = `alternative__${alternativeIndex}`;\n            const alternativeStatus = isCorrect ? 'SUCCESS' : 'ERROR';\n            const isSelected = selectedAlternative === alternativeIndex;\n            return (\n              <Widget.Topic\n                as=\"label\"\n                key={alternativeId}\n                htmlFor={alternativeId}\n                data-selected={isSelected}\n                data-status={isQuestionSubmited && alternativeStatus}\n              >\n                <input\n                  style={{ display: 'none' }}\n                  id={alternativeId}\n                  name={questionId}\n                  onChange={() => setSelectedAlternative(alternativeIndex)}\n                  type=\"radio\"\n                />\n                {alternative}\n              </Widget.Topic>\n            );\n          })}\n\n          {/* <pre>\n            {JSON.stringify(question, null, 4)}\n          </pre> */}\n          <Button type=\"submit\" disabled={!hasAlternativeSelected}>\n            Confirmar\n          </Button>\n          {isQuestionSubmited && isCorrect && <p>Você acertou!</p>}\n          {isQuestionSubmited && !isCorrect && <p>Você errou!</p>}\n        </AlternativesForm>\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nconst screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT',\n};\nexport default function QuizPage({ externalQuestions, externalBg }) {\n  const [screenState, setScreenState] = React.useState(screenStates.LOADING);\n  const [results, setResults] = React.useState([]);\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const questionIndex = currentQuestion;\n  const question = externalQuestions[questionIndex];\n  const totalQuestions = externalQuestions.length;\n  const bg = externalBg;\n\n  function addResult(result) {\n    // results.push(result);\n    setResults([\n      ...results,\n      result,\n    ]);\n  }\n\n  // [React chama de: Efeitos || Effects]\n  // React.useEffect\n  // atualizado === willUpdate\n  // morre === willUnmount\n  React.useEffect(() => {\n    // fetch() ...\n    setTimeout(() => {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 2000);\n    // nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    const nextQuestion = questionIndex + 1;\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return (\n    <QuizBackground backgroundImage={bg}>\n      <QuizContainer>\n        <QuizLogo />\n        {screenState === screenStates.QUIZ && (\n          <QuestionWidget\n            question={question}\n            questionIndex={questionIndex}\n            totalQuestions={totalQuestions}\n            onSubmit={handleSubmitQuiz}\n            addResult={addResult}\n          />\n        )}\n\n        {screenState === screenStates.LOADING && <LoadingWidget />}\n\n        {screenState === screenStates.RESULT && <ResultWidget results={results} totalQuestions={totalQuestions}/>}\n      </QuizContainer>\n    </QuizBackground>\n  );\n}"]},"metadata":{},"sourceType":"module"}