{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/weverson/Temp/Workspaces/imersao-react-alura/learnquiz/pages/quiz.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport db from '../db.json';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\n\nfunction LoadingWidget() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, \"Carregando....\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, \"s\"));\n}\n\n_c = LoadingWidget;\n\nfunction QuestionWidget(_ref) {\n  var _this = this;\n\n  var question = _ref.question,\n      questionIndex = _ref.questionIndex,\n      totalQuestions = _ref.totalQuestions,\n      _onSubmit = _ref.onSubmit;\n  var questionId = \"question__\".concat(questionIndex);\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, \"Pergunta \".concat(questionIndex + 1, \" de \").concat(totalQuestions, \" \"))), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'cover'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, question.description), __jsx(\"form\", {\n    onSubmit: function onSubmit(event) {\n      event.preventDefault();\n\n      _onSubmit();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, question.alternatives.map(function (alternative, alternativeIndex) {\n    var alternativeId = \"alternative__\".concat(alternativeIndex);\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      htmlFor: alternativeId,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 29\n      }\n    }, __jsx(\"input\", {\n      id: alternativeId,\n      name: questionId,\n      type: \"radio\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 33\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, \"confirmar\"))));\n}\n\n_c2 = QuestionWidget;\nvar screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage() {\n  _s();\n\n  var _React$useState = React.useState(screenStates.LOADING),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      screenState = _React$useState2[0],\n      setScreenState = _React$useState2[1];\n\n  var totalQuestions = db.questions.length;\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      currentQuestion = _React$useState4[0],\n      setCurrentQuestion = _React$useState4[1];\n\n  var questionIndex = currentQuestion;\n  var question = db.questions[questionIndex];\n  React.useEffect(function () {\n    setTimeout(function () {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 1000);\n  }, []);\n\n  function handleSubmitQuiz() {\n    var nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: db.bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }), screenState === screenState.LOADING && __jsx(LoadingWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 57\n    }\n  }), screenState === screenState.RESULT && console.log(\"ok\")));\n}\n\n_s(QuizPage, \"uFzTItWrf72xkd+gzQBa3gJACYU=\");\n\n_c3 = QuizPage;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LoadingWidget\");\n$RefreshReg$(_c2, \"QuestionWidget\");\n$RefreshReg$(_c3, \"QuizPage\");","map":{"version":3,"sources":["/home/weverson/Temp/Workspaces/imersao-react-alura/learnquiz/pages/quiz.js"],"names":["db","Widget","QuizLogo","QuizBackground","QuizContainer","Button","LoadingWidget","QuestionWidget","question","questionIndex","totalQuestions","onSubmit","questionId","width","height","objectFit","image","title","description","event","preventDefault","alternatives","map","alternative","alternativeIndex","alternativeId","screenStates","QUIZ","LOADING","RESULT","QuizPage","React","useState","screenState","setScreenState","questions","length","currentQuestion","setCurrentQuestion","useEffect","setTimeout","handleSubmitQuiz","nextQuestion","bg","console","log"],"mappings":"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","sourcesContent":["import db from '../db.json';\n\n\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\n\n\nfunction LoadingWidget() {\n    return (\n        <Widget>\n            <Widget.Header>\n                Carregando....\n            </Widget.Header>\n            <Widget.Content>\n                s\n            </Widget.Content>\n        </Widget>\n    );\n}\n\nfunction QuestionWidget({ question, questionIndex, totalQuestions, onSubmit }) {\n    const questionId = `question__${questionIndex}`;\n\n    return (\n\n        <Widget>\n            <Widget.Header>\n                {/* <BackLinkArrow href=\"/\" /> */}\n                <h3>\n                    {`Pergunta ${questionIndex + 1} de ${totalQuestions} `}\n                </h3>\n\n            </Widget.Header>\n            <img\n                alt=\"Descrição\"\n                style={{\n                    width: '100%',\n                    height: '150px',\n                    objectFit: 'cover',\n                }}\n                src={question.image}\n            />\n            <Widget.Content>\n                <h2>\n                    {question.title}\n                </h2>\n                <p>\n                    {question.description}\n                </p>\n\n                <form\n                    onSubmit={(event) => {\n                        event.preventDefault();\n                        onSubmit();\n                    }}\n                >\n                    {question.alternatives.map((alternative, alternativeIndex) => {\n                        const alternativeId = `alternative__${alternativeIndex}`;\n                        return (\n                            <Widget.Topic\n                                as=\"label\"\n                                htmlFor={alternativeId}>\n                                <input\n                                    id={alternativeId}\n                                    name={questionId}\n                                    type=\"radio\" />\n                                {alternative}\n\n                            </Widget.Topic>\n                        );\n                    })}\n                    <Button>\n                        confirmar\n                     </Button>\n                </form>\n\n            </Widget.Content>\n        </Widget>\n\n    );\n}\n\nconst screenStates = {\n    QUIZ: 'QUIZ',\n    LOADING: 'LOADING',\n    RESULT: 'RESULT',\n};\n\nexport default function QuizPage() {\n    const [screenState, setScreenState] = React.useState(screenStates.LOADING);\n    const totalQuestions = db.questions.length;\n    const [currentQuestion, setCurrentQuestion] = React.useState(0);\n    const questionIndex = currentQuestion;\n    const question = db.questions[questionIndex];\n\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            setScreenState(screenStates.QUIZ);\n        }, 1 * 1000);\n    }, []);\n\n    function handleSubmitQuiz() {\n        const nextQuestion = questionIndex + 1;\n        if (nextQuestion < totalQuestions) {\n            setCurrentQuestion(nextQuestion);\n        } else {\n            setScreenState(screenStates.RESULT);\n        }\n    }\n\n    return (\n        <QuizBackground backgroundImage={db.bg}>\n            <QuizContainer>\n                <QuizLogo />\n                {screenState === screenStates.QUIZ && (\n                    <QuestionWidget\n                        question={question}\n                        questionIndex={questionIndex}\n                        totalQuestions={totalQuestions}\n                        onSubmit={handleSubmitQuiz}\n                    />\n                )}\n\n                {screenState === screenState.LOADING && <LoadingWidget />}\n\n                {screenState === screenState.RESULT && console.log(\"ok\")}\n\n            </QuizContainer>\n        </QuizBackground>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}