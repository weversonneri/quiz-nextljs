{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/weverson/Temp/Workspaces/imersao-react-alura/learnquiz/pages/quiz.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport db from '../db.json';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\n\nfunction LoadingWidget() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, \"Carregando....\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, \"s\"));\n}\n\n_c = LoadingWidget;\n\nfunction QuestionWidget(_ref) {\n  _s();\n\n  var _this = this;\n\n  var question = _ref.question,\n      questionIndex = _ref.questionIndex,\n      totalQuestions = _ref.totalQuestions,\n      _onSubmit = _ref.onSubmit;\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedAlternative = _React$useState2[0],\n      setSelectedAlternative = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isQuestionSubmited = _React$useState4[0],\n      setIsQuestionSubmited = _React$useState4[1];\n\n  var questionId = \"question__\".concat(questionIndex);\n  var isCorrect = selectedAlternative === question.answer;\n  var hasAlternativeSelected = selectedAlternative !== undefined;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, \"Pergunta \".concat(questionIndex + 1, \" de \").concat(totalQuestions, \" \"))), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'cover'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, question.description), __jsx(\"form\", {\n    onSubmit: function onSubmit(event) {\n      event.preventDefault();\n      setIsQuestionSubmited(true);\n      setTimeout(function () {\n        _onSubmit();\n\n        setIsQuestionSubmited(false);\n        setSelectedAlternative(undefined);\n        selectedAlternative(false);\n      }, 3 * 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, question.alternatives.map(function (alternative, alternativeIndex) {\n    var alternativeId = \"alternative__\".concat(alternativeIndex);\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      key: alternativeId,\n      htmlFor: alternativeId,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    }, __jsx(\"input\", {\n      id: alternativeId,\n      name: questionId,\n      onChange: function onChange() {\n        return setSelectedAlternative(alternativeIndex);\n      },\n      type: \"radio\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    disabled: !hasAlternativeSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, \"confirmar\"), isQuestionSubmited && isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 57\n    }\n  }, \"Acertou\"), isQuestionSubmited && !isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 58\n    }\n  }, \"errou\"))));\n}\n\n_s(QuestionWidget, \"gOPL1EmksK8wUP52KQZyVU1FVK0=\");\n\n_c2 = QuestionWidget;\nvar screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage() {\n  _s2();\n\n  var _React$useState5 = React.useState(screenStates.LOADING),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      screenState = _React$useState6[0],\n      setScreenState = _React$useState6[1];\n\n  var totalQuestions = db.questions.length;\n\n  var _React$useState7 = React.useState(0),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      currentQuestion = _React$useState8[0],\n      setCurrentQuestion = _React$useState8[1];\n\n  var questionIndex = currentQuestion;\n  var question = db.questions[questionIndex];\n  React.useEffect(function () {\n    setTimeout(function () {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 1000);\n  }, []);\n\n  function handleSubmitQuiz() {\n    var nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: db.bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 58\n    }\n  }), screenState === screenStates.RESULT && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 57\n    }\n  }, \"jjdjjfhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh \")));\n}\n\n_s2(QuizPage, \"uFzTItWrf72xkd+gzQBa3gJACYU=\");\n\n_c3 = QuizPage;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LoadingWidget\");\n$RefreshReg$(_c2, \"QuestionWidget\");\n$RefreshReg$(_c3, \"QuizPage\");","map":{"version":3,"sources":["/home/weverson/Temp/Workspaces/imersao-react-alura/learnquiz/pages/quiz.js"],"names":["db","Widget","QuizLogo","QuizBackground","QuizContainer","Button","LoadingWidget","QuestionWidget","question","questionIndex","totalQuestions","onSubmit","React","useState","undefined","selectedAlternative","setSelectedAlternative","isQuestionSubmited","setIsQuestionSubmited","questionId","isCorrect","answer","hasAlternativeSelected","width","height","objectFit","image","title","description","event","preventDefault","setTimeout","alternatives","map","alternative","alternativeIndex","alternativeId","screenStates","QUIZ","LOADING","RESULT","QuizPage","screenState","setScreenState","questions","length","currentQuestion","setCurrentQuestion","useEffect","handleSubmitQuiz","nextQuestion","bg"],"mappings":"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","sourcesContent":["import db from '../db.json';\n\n\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\n\n\nfunction LoadingWidget() {\n    return (\n        <Widget>\n            <Widget.Header>\n                Carregando....\n            </Widget.Header>\n            <Widget.Content>\n                s\n            </Widget.Content>\n        </Widget>\n    );\n}\n\nfunction QuestionWidget({ question, questionIndex, totalQuestions, onSubmit }) {\n\n    const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n    const [isQuestionSubmited, setIsQuestionSubmited] = React.useState(false);\n    const questionId = `question__${questionIndex}`;\n    const isCorrect = selectedAlternative === question.answer;\n    const hasAlternativeSelected = selectedAlternative !== undefined;\n\n    return (\n\n        <Widget>\n            <Widget.Header>\n                {/* <BackLinkArrow href=\"/\" /> */}\n                <h3>\n                    {`Pergunta ${questionIndex + 1} de ${totalQuestions} `}\n                </h3>\n\n            </Widget.Header>\n            <img\n                alt=\"Descrição\"\n                style={{\n                    width: '100%',\n                    height: '150px',\n                    objectFit: 'cover',\n                }}\n                src={question.image}\n            />\n            <Widget.Content>\n                <h2>\n                    {question.title}\n                </h2>\n                <p>\n                    {question.description}\n                </p>\n\n                <form\n                    onSubmit={(event) => {\n                        event.preventDefault();\n                        setIsQuestionSubmited(true);\n                        setTimeout(() => {\n                            onSubmit();\n                            setIsQuestionSubmited(false);\n                            setSelectedAlternative(undefined);\n                            selectedAlternative(false)\n                        }, 3 * 1000); \n                    }}\n                >\n                    {question.alternatives.map((alternative, alternativeIndex) => {\n                        const alternativeId = `alternative__${alternativeIndex}`;\n                        return (\n                            <Widget.Topic\n                                as=\"label\"\n                                key={alternativeId}\n                                htmlFor={alternativeId}>\n                                <input\n                                    id={alternativeId}\n                                    name={questionId}\n                                    onChange={() => setSelectedAlternative(alternativeIndex)}\n                                    type=\"radio\" />\n                                {alternative}\n\n                            </Widget.Topic>\n                        );\n                    })}\n                    <Button type=\"submit\" disabled={!hasAlternativeSelected}>\n                        confirmar\n                     </Button>\n                    {isQuestionSubmited && isCorrect && <p>Acertou</p>}\n                    {isQuestionSubmited && !isCorrect && <p>errou</p>}\n                </form>\n\n            </Widget.Content>\n        </Widget>\n\n    );\n}\n\nconst screenStates = {\n    QUIZ: 'QUIZ',\n    LOADING: 'LOADING',\n    RESULT: 'RESULT',\n};\n\nexport default function QuizPage() {\n    const [screenState, setScreenState] = React.useState(screenStates.LOADING);\n    const totalQuestions = db.questions.length;\n    const [currentQuestion, setCurrentQuestion] = React.useState(0);\n    const questionIndex = currentQuestion;\n    const question = db.questions[questionIndex];\n\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            setScreenState(screenStates.QUIZ);\n        }, 1 * 1000);\n    }, []);\n\n    function handleSubmitQuiz() {\n        const nextQuestion = questionIndex + 1;\n        if (nextQuestion < totalQuestions) {\n            setCurrentQuestion(nextQuestion);\n        } else {\n            setScreenState(screenStates.RESULT);\n        }\n    }\n\n    return (\n        <QuizBackground backgroundImage={db.bg}>\n            <QuizContainer>\n                <QuizLogo />\n                {screenState === screenStates.QUIZ && (\n                    <QuestionWidget\n                        question={question}\n                        questionIndex={questionIndex}\n                        totalQuestions={totalQuestions}\n                        onSubmit={handleSubmitQuiz}\n                    />\n                )}\n\n                {screenState === screenStates.LOADING && <LoadingWidget />}\n\n                {screenState === screenStates.RESULT && <div>jjdjjfhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh </div>}\n\n            </QuizContainer>\n        </QuizBackground>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}