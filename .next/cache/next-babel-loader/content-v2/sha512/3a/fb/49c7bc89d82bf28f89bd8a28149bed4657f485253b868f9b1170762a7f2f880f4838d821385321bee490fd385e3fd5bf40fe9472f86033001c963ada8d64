{"ast":null,"code":"var _jsxFileName = \"/home/weverson/Temp/Workspaces/imersao-react-alura/learnquiz/pages/quiz.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport db from '../db.json';\nimport Link from 'next/link';\nimport router, { useRouter } from 'next/router';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\nimport AlternativesForm from '../src/components/AlternativesForm';\n\nconst User = () => {\n  const {\n    query: {\n      name\n    }\n  } = useRouter();\n  return __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }\n  }, \"Resultado \", name);\n};\n\nfunction ResultWidget({\n  results\n}) {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, __jsx(User, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  })), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }, `Acertou ${results.filter(x => x).length}`), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, results.map((result, index) => __jsx(\"li\", {\n    key: `result__${result}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  }, \"#\", index + 1, \" Resultado: \", result == true ? 'Acertou ' : 'Errou')))));\n}\n\nfunction LoadingWidget() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Carregando....\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"s\"));\n}\n\nfunction QuestionWidget({\n  question,\n  questionIndex,\n  totalQuestions,\n  onSubmit,\n  addResult\n}) {\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n  const [isQuestionSubmited, setIsQuestionSubmited] = React.useState(false);\n  const questionId = `question__${questionIndex}`;\n  const isCorrect = selectedAlternative === question.answer;\n  const hasAlternativeSelected = selectedAlternative !== undefined;\n  {\n    console.log(router.query);\n  }\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, `Pergunta ${questionIndex + 1} de ${totalQuestions} `)), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'cover'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, question.description), __jsx(AlternativesForm, {\n    onSubmit: event => {\n      event.preventDefault();\n      setIsQuestionSubmited(true);\n      setTimeout(() => {\n        addResult(isCorrect);\n        onSubmit();\n        setIsQuestionSubmited(false);\n        setSelectedAlternative(undefined);\n      }, 3 * 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, question.alternatives.map((alternative, alternativeIndex) => {\n    const alternativeId = `alternative__${alternativeIndex}`;\n    const alternativeStatus = isCorrect ? 'SUCCESS' : 'ERROR';\n    const isSelected = selectedAlternative === alternativeIndex;\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      key: alternativeId,\n      htmlFor: alternativeId,\n      \"data-selected\": isSelected,\n      \"data-status\": isQuestionSubmited && alternativeStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 29\n      }\n    }, __jsx(\"input\", {\n      style: {\n        display: 'none'\n      },\n      id: alternativeId,\n      name: questionId,\n      onChange: () => setSelectedAlternative(alternativeIndex),\n      type: \"radio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 33\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    disabled: !hasAlternativeSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, \"confirmar\"), isQuestionSubmited && isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 57\n    }\n  }, \"Acertou\"), isQuestionSubmited && !isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 58\n    }\n  }, \"errou\"))));\n}\n\nconst screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage() {\n  const [screenState, setScreenState] = React.useState(screenStates.LOADING);\n  const [results, setResults] = React.useState([]);\n  const totalQuestions = db.questions.length;\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const questionIndex = currentQuestion;\n  const question = db.questions[questionIndex];\n\n  function addResult(result) {\n    setResults([...results, result]);\n  }\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 1000);\n  }, []);\n\n  function handleSubmitQuiz() {\n    const nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: db.bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    addResult: addResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 58\n    }\n  }), screenState === screenStates.RESULT && __jsx(ResultWidget, {\n    results: results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 57\n    }\n  })));\n}","map":{"version":3,"sources":["/home/weverson/Temp/Workspaces/imersao-react-alura/learnquiz/pages/quiz.js"],"names":["db","Link","router","useRouter","Widget","QuizLogo","QuizBackground","QuizContainer","Button","AlternativesForm","User","query","name","ResultWidget","results","filter","x","length","map","result","index","LoadingWidget","QuestionWidget","question","questionIndex","totalQuestions","onSubmit","addResult","selectedAlternative","setSelectedAlternative","React","useState","undefined","isQuestionSubmited","setIsQuestionSubmited","questionId","isCorrect","answer","hasAlternativeSelected","console","log","width","height","objectFit","image","title","description","event","preventDefault","setTimeout","alternatives","alternative","alternativeIndex","alternativeId","alternativeStatus","isSelected","display","screenStates","QUIZ","LOADING","RESULT","QuizPage","screenState","setScreenState","setResults","questions","currentQuestion","setCurrentQuestion","useEffect","handleSubmitQuiz","nextQuestion","bg"],"mappings":";;;AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,IAAiBC,SAAjB,QAAkC,aAAlC;AAGA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAM;AACFC,IAAAA,KAAK,EAAE;AAACC,MAAAA;AAAD;AADL,MAEFT,SAAS,EAFb;AAIA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAiBS,IAAjB,CAAP;AACH,CAND;;AAQA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AAE/B,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD,CAAQ,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAII,MAAC,MAAD,CAAQ,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUM,WAAUA,OAAO,CAACC,MAAR,CAAgBC,CAAD,IAAOA,CAAtB,EAAyBC,MAAO,EAVhD,CADJ,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,OAAO,CAACI,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KACT;AAAI,IAAA,GAAG,EAAG,WAAUD,MAAO,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACMC,KAAK,GAAG,CADd,kBAC6BD,MAAM,IAAI,IAAV,GAAiB,UAAjB,GAA8B,OAD3D,CADH,CADL,CAbJ,CAJJ,CADJ;AA4BH;;AAKD,SAASE,aAAT,GAAyB;AACrB,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD,CAAQ,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAII,MAAC,MAAD,CAAQ,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ,CADJ;AAUH;;AAED,SAASC,cAAT,CAAwB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,aAAZ;AAA2BC,EAAAA,cAA3B;AAA2CC,EAAAA,QAA3C;AAAqDC,EAAAA;AAArD,CAAxB,EAA0F;AAEtF,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDC,KAAK,CAACC,QAAN,CAAeC,SAAf,CAAtD;AACA,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CJ,KAAK,CAACC,QAAN,CAAe,KAAf,CAApD;AACA,QAAMI,UAAU,GAAI,aAAYX,aAAc,EAA9C;AACA,QAAMY,SAAS,GAAGR,mBAAmB,KAAKL,QAAQ,CAACc,MAAnD;AACA,QAAMC,sBAAsB,GAAGV,mBAAmB,KAAKI,SAAvD;AACA;AAACO,IAAAA,OAAO,CAACC,GAAR,CAAYtC,MAAM,CAACS,KAAnB;AAA0B;AAC3B,SAEI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD,CAAQ,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACM,YAAWa,aAAa,GAAG,CAAE,OAAMC,cAAe,GADxD,CAFJ,CADJ,EAQI;AACI,IAAA,GAAG,EAAC,iBADR;AAEI,IAAA,KAAK,EAAE;AACHgB,MAAAA,KAAK,EAAE,MADJ;AAEHC,MAAAA,MAAM,EAAE,OAFL;AAGHC,MAAAA,SAAS,EAAE;AAHR,KAFX;AAOI,IAAA,GAAG,EAAEpB,QAAQ,CAACqB,KAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,EAiBI,MAAC,MAAD,CAAQ,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKrB,QAAQ,CAACsB,KADd,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKtB,QAAQ,CAACuB,WADd,CAJJ,EAQI,MAAC,gBAAD;AACI,IAAA,QAAQ,EAAGC,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACC,cAAN;AACAd,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAe,MAAAA,UAAU,CAAC,MAAM;AACbtB,QAAAA,SAAS,CAACS,SAAD,CAAT;AACAV,QAAAA,QAAQ;AACRQ,QAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAL,QAAAA,sBAAsB,CAACG,SAAD,CAAtB;AACH,OALS,EAKP,IAAI,IALG,CAAV;AAMH,KAVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYKT,QAAQ,CAAC2B,YAAT,CAAsBhC,GAAtB,CAA0B,CAACiC,WAAD,EAAcC,gBAAd,KAAmC;AAC1D,UAAMC,aAAa,GAAI,gBAAeD,gBAAiB,EAAvD;AACA,UAAME,iBAAiB,GAAGlB,SAAS,GAAG,SAAH,GAAe,OAAlD;AACA,UAAMmB,UAAU,GAAG3B,mBAAmB,KAAKwB,gBAA3C;AACA,WACI,MAAC,MAAD,CAAQ,KAAR;AACI,MAAA,EAAE,EAAC,OADP;AAEI,MAAA,GAAG,EAAEC,aAFT;AAGI,MAAA,OAAO,EAAEA,aAHb;AAII,uBAAeE,UAJnB;AAKI,qBAAatB,kBAAkB,IAAIqB,iBALvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOI;AACI,MAAA,KAAK,EAAE;AAAEE,QAAAA,OAAO,EAAE;AAAX,OADX;AAEI,MAAA,EAAE,EAAEH,aAFR;AAGI,MAAA,IAAI,EAAElB,UAHV;AAII,MAAA,QAAQ,EAAE,MAAMN,sBAAsB,CAACuB,gBAAD,CAJ1C;AAKI,MAAA,IAAI,EAAC,OALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,EAaKD,WAbL,CADJ;AAkBH,GAtBA,CAZL,EAmCI,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACb,sBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAnCJ,EAsCKL,kBAAkB,IAAIG,SAAtB,IAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAtCxC,EAuCKH,kBAAkB,IAAI,CAACG,SAAvB,IAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAvCzC,CARJ,CAjBJ,CAFJ;AAyEH;;AAED,MAAMqB,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,MADW;AAEjBC,EAAAA,OAAO,EAAE,SAFQ;AAGjBC,EAAAA,MAAM,EAAE;AAHS,CAArB;AAMA,eAAe,SAASC,QAAT,GAAoB;AAC/B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCjC,KAAK,CAACC,QAAN,CAAe0B,YAAY,CAACE,OAA5B,CAAtC;AACA,QAAM,CAAC7C,OAAD,EAAUkD,UAAV,IAAwBlC,KAAK,CAACC,QAAN,CAAe,EAAf,CAA9B;AACA,QAAMN,cAAc,GAAGzB,EAAE,CAACiE,SAAH,CAAahD,MAApC;AACA,QAAM,CAACiD,eAAD,EAAkBC,kBAAlB,IAAwCrC,KAAK,CAACC,QAAN,CAAe,CAAf,CAA9C;AACA,QAAMP,aAAa,GAAG0C,eAAtB;AACA,QAAM3C,QAAQ,GAAGvB,EAAE,CAACiE,SAAH,CAAazC,aAAb,CAAjB;;AAEA,WAASG,SAAT,CAAmBR,MAAnB,EAA2B;AACvB6C,IAAAA,UAAU,CAAC,CACP,GAAGlD,OADI,EAEPK,MAFO,CAAD,CAAV;AAIH;;AAEDW,EAAAA,KAAK,CAACsC,SAAN,CAAgB,MAAM;AAClBnB,IAAAA,UAAU,CAAC,MAAM;AACbc,MAAAA,cAAc,CAACN,YAAY,CAACC,IAAd,CAAd;AACH,KAFS,EAEP,IAAI,IAFG,CAAV;AAGH,GAJD,EAIG,EAJH;;AAMA,WAASW,gBAAT,GAA4B;AACxB,UAAMC,YAAY,GAAG9C,aAAa,GAAG,CAArC;;AACA,QAAI8C,YAAY,GAAG7C,cAAnB,EAAmC;AAC/B0C,MAAAA,kBAAkB,CAACG,YAAD,CAAlB;AACH,KAFD,MAEO;AACHP,MAAAA,cAAc,CAACN,YAAY,CAACG,MAAd,CAAd;AACH;AACJ;;AAED,SACI,MAAC,cAAD;AAAgB,IAAA,eAAe,EAAE5D,EAAE,CAACuE,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKT,WAAW,KAAKL,YAAY,CAACC,IAA7B,IACG,MAAC,cAAD;AACI,IAAA,QAAQ,EAAEnC,QADd;AAEI,IAAA,aAAa,EAAEC,aAFnB;AAGI,IAAA,cAAc,EAAEC,cAHpB;AAII,IAAA,QAAQ,EAAE4C,gBAJd;AAKI,IAAA,SAAS,EAAE1C,SALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHR,EAYKmC,WAAW,KAAKL,YAAY,CAACE,OAA7B,IAAwC,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZ7C,EAcKG,WAAW,KAAKL,YAAY,CAACG,MAA7B,IAAuC,MAAC,YAAD;AAAc,IAAA,OAAO,EAAE9C,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAd5C,CADJ,CADJ;AAqBH","sourcesContent":["import db from '../db.json';\nimport Link from 'next/link';\nimport router, { useRouter } from 'next/router';\n\n\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\nimport AlternativesForm from '../src/components/AlternativesForm';\n\nconst User = () => {\n    const {\n        query: {name},\n    } = useRouter();\n    \n    return <span>Resultado {name}</span>\n}\n\nfunction ResultWidget({ results }) {\n\n    return (\n        <Widget>\n            <Widget.Header>\n                <User/>\n            </Widget.Header>\n            <Widget.Content>\n                <p>\n                    {/*`Acertou\n                    ${results.reduce((somatoriaAtual, resultadoAtual) => {\n                        const isAcerto = resultadoAtual === true;\n                        if(isAcerto) {\n                            return somatoriaAtual + 1;\n                        }\n                        return somatoriaAtual;\n                    }, 0)}`*/}\n\n                    {`Acertou ${results.filter((x) => x).length}`}\n                </p>\n                <ul>\n                    {results.map((result, index) => (\n                        <li key={`result__${result}`}>\n                            #{index + 1} Resultado: {result == true ? 'Acertou ' : 'Errou'}\n                        </li>\n                    ))}\n                </ul>\n            </Widget.Content>\n        </Widget>\n    );\n}\n\n\n\n\nfunction LoadingWidget() {\n    return (\n        <Widget>\n            <Widget.Header>\n                Carregando.... \n            </Widget.Header>\n            <Widget.Content>\n                s\n            </Widget.Content>\n        </Widget>\n    );\n}\n\nfunction QuestionWidget({ question, questionIndex, totalQuestions, onSubmit, addResult }) {\n\n    const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n    const [isQuestionSubmited, setIsQuestionSubmited] = React.useState(false);\n    const questionId = `question__${questionIndex}`;\n    const isCorrect = selectedAlternative === question.answer;\n    const hasAlternativeSelected = selectedAlternative !== undefined;\n    {console.log(router.query)}\n    return (\n\n        <Widget>\n            <Widget.Header>\n                {/* <BackLinkArrow href=\"/\" /> */}\n                <h3>\n                    {`Pergunta ${questionIndex + 1} de ${totalQuestions} `}\n                </h3>\n\n            </Widget.Header>\n            <img\n                alt=\"Descrição\"\n                style={{\n                    width: '100%',\n                    height: '150px',\n                    objectFit: 'cover',\n                }}\n                src={question.image}\n            />\n            <Widget.Content>\n                <h2>\n                    {question.title}\n                </h2>\n                <p>\n                    {question.description}\n                </p>\n\n                <AlternativesForm\n                    onSubmit={(event) => {\n                        event.preventDefault();\n                        setIsQuestionSubmited(true);\n                        setTimeout(() => {\n                            addResult(isCorrect);\n                            onSubmit();\n                            setIsQuestionSubmited(false);\n                            setSelectedAlternative(undefined);\n                        }, 3 * 1000);\n                    }}\n                >\n                    {question.alternatives.map((alternative, alternativeIndex) => {\n                        const alternativeId = `alternative__${alternativeIndex}`;\n                        const alternativeStatus = isCorrect ? 'SUCCESS' : 'ERROR';\n                        const isSelected = selectedAlternative === alternativeIndex;\n                        return (\n                            <Widget.Topic\n                                as=\"label\"\n                                key={alternativeId}\n                                htmlFor={alternativeId}\n                                data-selected={isSelected}\n                                data-status={isQuestionSubmited && alternativeStatus}\n                                >\n                                <input\n                                    style={{ display: 'none' }}\n                                    id={alternativeId}\n                                    name={questionId}\n                                    onChange={() => setSelectedAlternative(alternativeIndex)}\n                                    type=\"radio\" />\n                                {alternative}\n\n                            </Widget.Topic>\n                        );\n                    })}\n                    <Button type=\"submit\" disabled={!hasAlternativeSelected}>\n                        confirmar\n                     </Button>\n                    {isQuestionSubmited && isCorrect && <p>Acertou</p>}\n                    {isQuestionSubmited && !isCorrect && <p>errou</p>}\n                </AlternativesForm>\n\n            </Widget.Content>\n        </Widget>\n\n    );\n}\n\nconst screenStates = {\n    QUIZ: 'QUIZ',\n    LOADING: 'LOADING',\n    RESULT: 'RESULT',\n};\n\nexport default function QuizPage() {\n    const [screenState, setScreenState] = React.useState(screenStates.LOADING);\n    const [results, setResults] = React.useState([]);\n    const totalQuestions = db.questions.length;\n    const [currentQuestion, setCurrentQuestion] = React.useState(0);\n    const questionIndex = currentQuestion;\n    const question = db.questions[questionIndex];\n\n    function addResult(result) {\n        setResults([\n            ...results,\n            result,\n        ]);\n    }\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            setScreenState(screenStates.QUIZ);\n        }, 1 * 1000);\n    }, []);\n\n    function handleSubmitQuiz() {\n        const nextQuestion = questionIndex + 1;\n        if (nextQuestion < totalQuestions) {\n            setCurrentQuestion(nextQuestion);\n        } else {\n            setScreenState(screenStates.RESULT);\n        }\n    }\n\n    return (\n        <QuizBackground backgroundImage={db.bg}>\n            <QuizContainer>\n                <QuizLogo />\n                {screenState === screenStates.QUIZ && (\n                    <QuestionWidget\n                        question={question}\n                        questionIndex={questionIndex}\n                        totalQuestions={totalQuestions}\n                        onSubmit={handleSubmitQuiz}\n                        addResult={addResult}\n                    />\n                )}\n\n                {screenState === screenStates.LOADING && <LoadingWidget />}\n\n                {screenState === screenStates.RESULT && <ResultWidget results={results} />}\n\n            </QuizContainer>\n        </QuizBackground>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}